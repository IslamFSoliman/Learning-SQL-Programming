SELECT *
  FROM accounts
 WHERE id > 1500 AND id < 1600;

SELECT *
  FROM accounts
 WHERE primary_poc IS NULL;
"We use IS with NULL since it isn't a value, but the property of the data"
"We could use IS NOT with NULL to get reversed results"

SELECT COUNT(*)
  FROM accounts;

SELECT COUNT(accounts.id)
  FROM accounts;

SELECT COUNT (*) AS order_count
  FROM orders
 WHERE occurred_at >= '2016-12-01'
   AND occurred_at < '2017-01-01';

SELECT COUNT (primary_poc) AS account_primary_poc_count
  FROM accounts;

SELECT SUM (standard-qty) AS standard,
       SUM (gloss_qty) AS gloss,
       SUM (poster_qty) AS poster
  FROM orders;

SELECT SUM(poster_qty) AS total_poster_sales
  FROM orders;

SELECT SUM(total_amt_usd) AS total_dollar_sales
  FROM orders;

SELECT standard_amt_usd + gloss_amt_usd AS total_standard_gloss
  FROM orders;

SELECT SUM(standard_amt_usd)/SUM(standard_qty) AS standard_price_per_unit
  FROM orders;

SELECT MIN(standard_qty) AS standard_min,
       MIN(gloss_qty) AS gloss_min,
       MIN(poster_qty) AS poster_min,
       MAX(standard_qty) AS standard_max,
       MAX(gloss_qty) AS gloss_max,
       MAX(poster_qty) AS poster_max
  FROM orders;

SELECT AVG(standard_qty) AS standard_avg,
       AVG(gloss_qty) AS gloss_avg,
       AVG(poster_qty) AS poster_avg,
  FROM orders;

SELECT MIN(occurred_at)
  FROM orders;

SELECT occurred_at
  FROM orders
ORDER BY occurred_at
LIMIT 1;

SELECT MAX(occurred_at)
  FROM web_events;

SELECT occurred_at
  FROM web_events
  ORDER BY occurred_at DESC
  LIMIT 1;

SELECT AVG(standard_qty) AS mean_standard,
       AVG(gloss_qty) AS mean_gloss,
       AVG(poster_qty) AS mean_poster,
       AVG(standard_amt_usd) AS mean_standard_amt,
       AVG(gloss_amt_usd) AS mean_gloss_amt,
       AVG(poster_amt_usd) AS mean_poster_amt
  FROM orders;

SELECT *
FROM (SELECT total_amt_usd
      FROM orders
      ORDER BY total_amt_usd
      LIMIT 3457) AS Table1
ORDER BY total_amt_usd DESC
LIMIT 2;

SELECT a.name, o.occurred_at
  FROM accounts a
  JOIN orders o
    ON a.id = o.account_id
ORDER BY o.occurred_at;

SELECT a.name, SUM(total_amt_usd) total_sales
FROM orders o
JOIN accounts a
ON a.id = o.account_id
GROUP BY a.name;

SELECT w.occurred_at, w.channel, a.name
FROM web_events w
JOIN accounts a
ON w.account_id = a.id
ORDER BY w.occurred_at DESC
LIMIT 1;

SELECT channel, COUNT (*)
FROM web_events
GROUP BY channel;

SELECT a.primary_poc
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
ORDER BY w.occurred_at
LIMIT 1;

SELECT a.name, MIN(total_amt_usd) smallest_order
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.name
ORDER BY smallest_order;

SELECT r.name region, COUNT(s.region_id) sales_reps
FROM sales_reps s
JOIN region r
ON s.region_id = r.id
GROUP BY region
ORDER BY sales_reps;

SELECT a.name,
       AVG(o.standard_qty) AS standard_avg,
       AVG(o.gloss_qty) AS gloss_avg,
       AVG(o.poster_qty) AS poster_avg
  FROM accounts a
  JOIN orders o
    ON a.id = o.account_id
GROUP BY a.name;

SELECT a.name,
       AVG(o.standard_amt_usd) AS mean_standard_amt_usd,
       AVG(o.gloss_amt_usd) AS mean_gloss_amt_usd,
       AVG(o.poster_amt_usd) AS mean_poster_amt_usd
  FROM accounts a
  JOIN orders o
    ON a.id = o.account_id
GROUP BY a.name;

SELECT s.name,
       w.channel,
       COUNT(*) num_events
  FROM accounts a
  JOIN web_events w
    ON a.id = w.account_id
  JOIN sales_reps s
    ON s.id = a.sales_rep_id
GROUP BY s.name, w.channel
ORDER BY num_events DESC;

SELECT r.name AS region,
       w.channel,
       COUNT(*) occurrences
  FROM web_events w
  JOIN accounts a
    ON w.account_id = a.id
  JOIN sales_reps s
    ON a.sales_rep_id = s.id
  JOIN region r
    ON s.region_id = r.id
GROUP BY region, w.channel
ORDER BY occurrences DESC;

SELECT a.id AS "account_id", r.id AS "region_id",
a.name AS "account_name", r.name AS "region_name"
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
JOIN region r
ON r.id = s.region_id;
SELECT DISTINCT id, name
FROM accounts;

SELECT s.id, s.name, COUNT(*) num_of_accounts
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.id, s.name
ORDER BY num_of_accounts;
SELECT DISTINCT id, name
FROM sales_reps;

How many of the sales reps have more than 5 accounts that they manage?
SELECT s.id, s.name, COUNT(*) num_of_accounts
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.id, s.name
HAVING COUNT(*) > 5
ORDER BY num_of_accounts;
or
SELECT COUNT(*) num_reps_above5
FROM(SELECT s.id, s.name, COUNT(*) num_of_accounts
FROM accounts a
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.id, s.name
HAVING COUNT(*) > 5
ORDER BY num_of_accounts) AS Table1;

How many accounts have more than 20 orders?
SELECT a.id, a.name, COUNT(*) num_of_orders
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING COUNT(*) > 20
ORDER BY num_of_orders;

Which account has the most orders?
SELECT a.id, a.name, COUNT(*) num_of_orders
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY num_of_orders DESC
LIMIT 1;

How many accounts spent more than 30,000 usd total across all orders?
SELECT a.id, a.name, SUM(o.total_amt_usd) total_amt_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING SUM(o.total_amt_usd) > 30000
ORDER BY total_amt_spent;

How many accounts spent less than 1,000 usd total across all orders?
SELECT a.id, a.name, SUM(o.total_amt_usd) total_amt_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
HAVING SUM(o.total_amt_usd) < 1000
ORDER BY total_amt_spent;

Which account has spent the most with us?
SELECT a.id, a.name, SUM(o.total_amt_usd) total_amt_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY total_amt_spent DESC
LIMIT 1;

Which account has spent the least with us?
SELECT a.id, a.name, SUM(o.total_amt_usd) total_amt_spent
FROM accounts a
JOIN orders o
ON a.id = o.account_id
GROUP BY a.id, a.name
ORDER BY total_amt_spent
LIMIT 1;

Which accounts used facebook as a channel to contact customers more than 6 times?
SELECT a.id, a.name, w.channel, COUNT(*) channel_use
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY a.id, a.name, w.channel
HAVING COUNT(*) > 6 AND w.channel = 'facebook'
ORDER BY channel_use;

Which account used facebook most as a channel?
SELECT a.id, a.name, w.channel, COUNT(*) channel_use
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
WHERE w.channel = 'facebook'
GROUP BY a.id, a.name, w.channel
ORDER BY channel_use DESC
LIMIT 1;

Which channel was most frequently used by most accounts?
SELECT a.id, a.name, w.channel, COUNT(*) channel_use
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY a.id, a.name, w.channel
ORDER BY channel_use DESC
LIMIT 10;

Using DATE_TRUNC
SELECT DATE_TRUNC('day',occurred_at) AS day,
       SUM(standard_qty) AS standard_qty_sum
  FROM orders
GROUP BY DATE_TRUNC('day',occurred_at)
ORDER BY DATE_TRUNC('day',occurred_at);

Using DATE_PART
SELECT DATE_PART('dow',occurred_at) AS day_of_week,
       SUM(total) AS total_qty
  FROM orders
GROUP BY 1
ORDER BY 2 DESC;

Find the sales in terms of total dollars for all orders in each year, ordered from greatest to least. Do you notice any trends in the yearly sales totals?
SELECT DATE_PART('year', occurred_at) orders_year,
       SUM(total_amt_usd) total_spent
FROM orders
GROUP BY 1
ORDER BY 2 DESC;

Which month did Parch & Posey have the greatest sales in terms of total dollars? Are all months evenly represented by the dataset?
SELECT DATE_PART('month', occurred_at) ord_per_month,
       SUM(total_amt_usd) total_spent
FROM orders
WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
GROUP BY 1
ORDER BY 2 DESC;

Which year did Parch & Posey have the greatest sales in terms of total number of orders? Are all years evenly represented by the dataset?
SELECT DATE_PART('year', occurred_at) orders_year,
       COUNT(*) total_sales
FROM orders
GROUP BY 1
ORDER BY 2 DESC;

Which month did Parch & Posey have the greatest sales in terms of total number of orders? Are all months evenly represented by the dataset?
SELECT DATE_PART('month', occurred_at) ord_per_month,
       COUNT(*) total_sales
FROM orders
WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
GROUP BY 1
ORDER BY 2 DESC;

In which month of which year did Walmart spend the most on gloss paper in terms of dollars?
SELECT DATE_TRUNC('month', o.occurred_at) order_date,
       SUM(o.gloss_amt_usd) total_spent
FROM orders o
JOIN accounts a
ON a.id = o.account_id
WHERE a.name = 'Walmart'
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

CASE Statement
SELECT id,
       account_id,
       occurred_at,
       channel,
       CASE WHEN channel = 'facebook' OR channel = 'direct' THEN 'yes' ELSE 'no' END AS is_facebook
  FROM web_events
ORDER BY occurred_at;

SELECT account_id,
       occurred_at,
       total,
       CASE WHEN total > 500 THEN 'Over 500'
            WHEN total > 300 and total <= 500 THEN '301 - 500'
            WHEN total > 100 and total <= 300 THEN '101 - 300'
            ELSE '100  or under' END AS total_group
  FROM orders;

SELECT CASE WHEN total > 500 THEN 'Over 500'
            ELSE '500 or under' END AS total_group,
            COUNT (*) AS order_count
  FROM orders
GROUP BY 1;

1-Write a query to display for each order, the account ID, total amount of the order, and the level of the order - ‘Large’ or ’Small’ - depending on if the order is $3000 or more, or smaller than $3000.
SELECT account_id,
       total_amt_usd,
       CASE WHEN total_amt_usd > 3000 THEN 'Large'
            ELSE 'Small' END AS order_level
FROM orders;

2-Write a query to display the number of orders in each of three categories, based on the total number of items in each order. The three categories are: 'At Least 2000', 'Between 1000 and 2000' and 'Less than 1000'.
  SELECT CASE WHEN total > 2000 THEN 'At Least 2000'
              WHEN total > 1000 and total <= 2000 THEN 'Between 1000 and 2000'
              ELSE 'Less than 1000' END AS order_cat,
              COUNT (*) AS order_count
  FROM orders
GROUP BY 1;

3-We would like to understand 3 different levels of customers based on the amount associated with their purchases. The top level includes anyone with a Lifetime Value (total sales of all orders) greater than 200,000 usd. The second level is between 200,000 and 100,000 usd. The lowest level is anyone under 100,000 usd. Provide a table that includes the level associated with each account. You should provide the account name, the total sales of all orders for the customer, and the level. Order with the top spending customers listed first.
SELECT a.name, SUM(total_amt_usd) total_spent,
     CASE WHEN SUM(total_amt_usd) > 200000 THEN 'top'
          WHEN SUM(total_amt_usd) > 100000 THEN 'middle'
          ELSE 'low' END AS customer_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
GROUP BY a.name
ORDER BY 2 DESC;

4-We would now like to perform a similar calculation to the first, but we want to obtain the total amount spent by customers only in 2016 and 2017. Keep the same levels as in the previous question. Order with the top spending customers listed first.
SELECT a.name, SUM(total_amt_usd) total_spent,
     CASE WHEN SUM(total_amt_usd) > 200000 THEN 'top'
     WHEN  SUM(total_amt_usd) > 100000 THEN 'middle'
     ELSE 'low' END AS customer_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
WHERE occurred_at > '2015-12-31'
GROUP BY 1
ORDER BY 2 DESC;

5-We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders. Create a table with the sales rep name, the total number of orders, and a column with top or not depending on if they have more than 200 orders. Place the top sales people first in your final table.
SELECT s.name, COUNT(*) num_of_orders,
     CASE WHEN COUNT(*) > 200 THEN 'top'
     ELSE 'not' END AS sales_rep_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.name
ORDER BY 2 DESC;

6-The previous didn't account for the middle, nor the dollar amount associated with the sales. Management decides they want to see these characteristics represented as well. We would like to identify top performing sales reps, which are sales reps associated with more than 200 orders or more than 750000 in total sales. The middle group has any rep with more than 150 orders or 500000 in sales. Create a table with the sales rep name, the total number of orders, total sales across all orders, and a column with top, middle, or low depending on this criteria. Place the top sales people based on dollar amount of sales first in your final table. You might see a few upset sales people by this criteria!
SELECT s.name, COUNT(*), SUM(o.total_amt_usd) total_spent,
     CASE WHEN COUNT(*) > 200 OR SUM(o.total_amt_usd) > 750000 THEN 'top'
     WHEN COUNT(*) > 150 OR SUM(o.total_amt_usd) > 500000 THEN 'middle'
     ELSE 'low' END AS sales_rep_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
JOIN sales_reps s
ON s.id = a.sales_rep_id
GROUP BY s.name
ORDER BY 3 DESC;
